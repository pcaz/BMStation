<?php
namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ModelRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModelRepository extends EntityRepository
{
	
	public function findById(){
		$qb = $this->createQueryBuilder('m')
		->Join('m.series','s')
		->orderBy('s.name','ASC')
		->orderBy('m.name','ASC');
		$query=$qb->getQuery();
		$models=$query->getResult();
		return $models;
		
	}

	public function findProduct($model=null){
		
		$qb = $this->createQueryBuilder('m')
			->where ('m.id=:model')
			->select('m.product')
			->setParameter('model',$model);
			
		$query=$qb->getQuery();
		$products=$query->getResult();
		return $products;
	}
	
	
	public function findBySeries($series=null){
		
		$qb = $this->createQueryBuilder('m');
	
		if ($series==null){
			$qb-> orderBy('m.series', 'ASC');
			return $qb;
		}
		else {
			$qb ->where("m.series= :series")
			->orderBy('m.id', 'ASC')
			->setParameter('series', $series);
			$query = $qb->getQuery();
			$models=$query->getResult();
			return $models;
			
			
		}

	}
	public function findByKeyword($keyword)
	{
		$qb = $this->createQueryBuilder('a');
	
		$qb	->where("a.name LIKE :keyword")
		->orderBy('a.name', 'ASC')
		->setParameter('keyword',$keyword.'%');
	
		$query = $qb->getQuery();
		$models = $query->getResult();
		return $models;
	}
/**
 * Return les éléments sélectionnés dans un domaine( set selected=true)
 * @param array $selected
 * @param array $domain
 * @return unknown
 */
	public function getSelected($selected, $domain){

		if($selected==null) return $domain;
		
		for($i=0;$i<count($domain);$i++) {
			for($j=0;$j<count($selected);$j++){
				if(($selected[$j] instanceof \AppBundle\Entity\Model)
						&& ($domain[$i] instanceof \AppBundle\Entity\Model)
						&& ($selected[$j]->getId()==$domain[$i]->getId())){
					         $domain[$i]->setSelected(true);
				}
			}
		}
		return $domain;
	}
}

